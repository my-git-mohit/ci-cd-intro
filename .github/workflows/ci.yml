name: Node.js CI/CD Pipeline

# Trigger the workflow on push to main or pull request
on:
  push:
    branches:
      - main
    paths:
      - 'web/**'
  pull_request:
    branches:
      - main
    paths:
      - 'web/**'

# Define the jobs in the workflow
jobs:
  build:
    runs-on: ubuntu-latest  # The environment to run the job

    # Strategy to test on multiple Node.js versions (optional)
   

    # The steps for the build job
    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up the required Node.js version
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20.x"

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Run tests
      - name: Run tests
        run: npm run test

      # Build the application (if applicable)
      - name: Build the application
        run: npm run build
  lint:
      name: 'Lintering'
      default:
        run:
           shell: bash
           working-directory: ./web
      run-on: ubuntu-latest
      steps:
       - name: Checkout
         uses: actions/checkout@v2
       - name: node version
         uses: actions/setup-node@v2
         with:
          node-version: "20.x"
       - name: install dependencies
         run: npm install
       - name: testing 
         run: npm run test
       - name: 'Lintering'
         run: npx standard -v

  deploy:
    runs-on: ubuntu-latest
    needs: ['build','lint']  # This ensures the build job passes before running deployment

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Node.js (same as the build job)
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20.x"

      # Install dependencies (again in the deploy step)
      - name: Install dependencies
        run: npm install

      # Deploy the app (this can be done via SSH, FTP, or other deployment strategies)
      # Example deployment via SSH (you would set up SSH keys in GitHub Secrets)
      - name: Deploy to production server
        run: |
          ssh ubuntu@ec2-52-66-134-93.ap-south-1.compute.amazonaws.com 'cd /path/to/project && git pull && npm install && npm run build && pm2 restart app'
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
